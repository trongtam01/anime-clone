import {
  createAsyncThunk,
  createSlice,
} from '@reduxjs/toolkit';
import type { RootState } from '../../app/store';
import { Anime } from '../../interfaces';
import { getAllAnime } from '../../services/animeServices';

// here we are typing the types for the state
export type AnimeState = {
    data: Anime[]
    pending: boolean;
    error: boolean;
};

const initialState: AnimeState = {
    data: [{
        name: '',
        slug: '',
        year: 0,
        season: '',
        synopsis: '',
    }],
    pending: false,
    error: false,
};

// This action is what we will call using the dispatch in order to trigger the API call.
export const getAnimeQuote = createAsyncThunk('anime/AnimeQuote', async () => {
  const response = await getAllAnime();

  return response.anime;
});

export const animeSlice = createSlice({
  name: 'kanye',
  initialState,
  reducers: {
// leave this empty here
  },
// The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices. 
// Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes. 
// Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
  extraReducers: builder => {
    builder
      .addCase(getAnimeQuote.pending, state => {
        state.pending = true;
      })
      .addCase(getAnimeQuote.fulfilled, (state, { payload }) => {
// When the API call is successful and we get some data,the data becomes the `fulfilled` action payload
        state.pending = false;
        state.data = payload;
      })
      .addCase(getAnimeQuote.rejected, state => {
        state.pending = false;
        state.error = true;
      });
  },
});

export const selectAnime = (state: RootState) => state.anime;

export default animeSlice.reducer;